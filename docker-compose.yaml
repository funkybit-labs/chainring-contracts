
version: '3.7'

x-environment: &common-arch-environment
  RUST_LOG: "info,validator=info"
  RUSTC_LOG_COLOR: "never"
  RPC_BIND_IP: "0.0.0.0"
  RUST_BACKTRACE: "1" # enable error stack traces
  NETWORK_MODE: "localnet" # devnet, testnet, mainnet
  PRIVATE_KEY_PASSWORD: "" # Provide a password if you'd like to encrypt the local node keys.
#  BITCOIN_RPC_ENDPOINT: "bitcoin" # Replace with your bitcoin node's RPC endpoint
#  BITCOIN_RPC_PORT: "18443" # Replace with your bitcoin node's RPC port
#  BITCOIN_RPC_USERNAME: "user" # Replace with your bitcoin node's RPC username (if any)
#  BITCOIN_RPC_PASSWORD: "password" # Replace with your bitcoin node's RPC password (if any)
#  BITCOIN_RPC_WALLET: "testwallet"   # Replace with the name of the wallet to be used by arch-node
  BITCOIN_RPC_ENDPOINT: "bitcoin-node.dev.aws.archnetwork.xyz" # Replace with your bitcoin node's RPC endpoint
  BITCOIN_RPC_PORT: "18443" # Replace with your bitcoin node's RPC port
  BITCOIN_RPC_USERNAME: "bitcoin" # Replace with your bitcoin node's RPC username (if any)
  BITCOIN_RPC_PASSWORD: "428bae8f3c94f8c39c50757fc89c39bc7e6ebc70ebf8f618" # Replace with your bitcoin node's RPC password (if any)
  BITCOIN_RPC_WALLET: "devwallet"   # Replace with the name of the wallet to be used by arch-node

services:
  init:
    platform: linux/amd64
    image: ghcr.io/arch-network/validator:latest
    command:
      - /bin/bash
      - -c
      - |
        set -e
        echo "Generating validator PeerIds..."
        rm -f /bootnode_data/validator_whitelist /bootnode_data/leader_peer_id

        echo "> Replicas: ${REPLICA_COUNT}"
        LEADER_PEER_ID=$$(/validator -d /leader_data --generate-peer-id | tee -a /bootnode_data/validator_whitelist)
        echo "> Leader PeerID: $$LEADER_PEER_ID"
        echo "$$LEADER_PEER_ID" > /bootnode_data/leader_peer_id

        echo "> Add Leader Peer ID to whitelist"
        echo "$$LEADER_PEER_ID" >> /bootnode_data/validator_whitelist

        for i in $(seq 1 $${REPLICA_COUNT}); do
          echo ">> Making directory for replica $$i"
          mkdir -p /validators_data/$$i
          /validator -d /validators_data/$$i --generate-peer-id | tee -a /bootnode_data/validator_whitelist;
        done
        sort -u -o /bootnode_data/validator_whitelist /bootnode_data/validator_whitelist
    volumes:
      - ./arch/.arch-data/validator_arch_data:/validators_data
      - ./arch/.arch-data/leader_arch_data:/leader_data
      - ./arch/.arch-data/bootnode_arch_data:/bootnode_data
    environment:
      - REPLICA_COUNT=2

  bootnode:
    platform: linux/amd64
    image: ghcr.io/arch-network/bootnode:latest
    command:
      - /bin/bash
      - -c
      - |
        set -e
        while [ ! -f /arch_data/leader_peer_id ]; do
          echo "Waiting for leader_peer_id file..."
          sleep 1
        done
        WHITELIST=$(sort -u /arch_data/validator_whitelist | paste -sd "," -)
        LEADER_PEER_ID=$(cat /arch_data/leader_peer_id)
        echo "Validator Whitelist: $$WHITELIST"
        echo "Leader Peer ID: $$LEADER_PEER_ID"
        /bootnode -d /arch_data -n ${NETWORK_MODE:-localnet} --leader-peer-id "$$LEADER_PEER_ID" --validator-whitelist "$$WHITELIST"
    depends_on:
      init:
        condition: service_completed_successfully
    volumes:
      - ./arch/.arch-data/bootnode_arch_data:/arch_data
    networks:
      arch:
        ipv4_address: 172.19.0.250
    environment:
      NETWORK_MODE: "localnet"

  leader:
    platform: linux/amd64
    image: ghcr.io/arch-network/validator:latest
    depends_on:
      - bootnode
    command:
      - /bin/bash
      - -c
      - |
        set -ex
        while [ ! -f /bootnode_data/leader_peer_id ]; do
          echo "Waiting for leader_peer_id file..."
          sleep 1
        done
        LEADER_PEER_ID=$(cat /bootnode_data/leader_peer_id)
        echo "Leader Peer ID: $$LEADER_PEER_ID"
        # Get bootnode peer ID
        BOOTNODE_PEER_ID=$(cat /bootnode_data/peer_id)
        /validator -d /arch_data -n ${NETWORK_MODE:-localnet} -b "/ip4/172.19.0.250/tcp/19001/p2p/$$BOOTNODE_PEER_ID"
    volumes:
      - ./arch/.arch-data/leader_arch_data:/arch_data
      - ./arch/.arch-data/bootnode_arch_data:/bootnode_data:ro
    environment:
      <<: *common-arch-environment
      RPC_BIND_PORT: "9002"
      P2P_BIND_PORT: "19002"
    ports:
      - 19002:19002
      - 9002:9002
    networks:
      - arch

  validator-1:
    platform: linux/amd64
    image: ghcr.io/arch-network/validator:latest
    command: /usr/local/bin/validator.sh
    environment:
      <<: *common-arch-environment
      REPLICA_ID: "1"
      RPC_BIND_PORT: "9003"
      P2P_BIND_PORT: "19003"
    volumes:
      - ./arch/.arch-data/validator_arch_data:/arch_data
      - ./arch/.arch-data/bootnode_arch_data:/bootnode_data:ro
      - ./arch/scripts/validator.sh:/usr/local/bin/validator.sh
    depends_on:
      - bootnode
    networks:
      - arch

  validator-2:
    platform: linux/amd64
    image: ghcr.io/arch-network/validator:latest
    command: /usr/local/bin/validator.sh
    environment:
      <<: *common-arch-environment
      REPLICA_ID: "2"
      RPC_BIND_PORT: "9004"
      P2P_BIND_PORT: "19004"
    volumes:
      - ./arch/.arch-data/validator_arch_data:/arch_data
      - ./arch/.arch-data/bootnode_arch_data:/bootnode_data:ro
      - ./arch/scripts/validator.sh:/usr/local/bin/validator.sh
    depends_on:
      - bootnode
    networks:
      - arch

#  bitcoin:
#    image: bitcoin
#    platform: linux/amd64
#    container_name: bitcoin
#    restart: always
#    ports:
#      - "18443:18443"
#      - "28332:28332"
#    stop_grace_period: 5s

#
#  fulcrum:
#    image: fulcrum
#    container_name: fulcrum
#    platform: linux/amd64
#    depends_on:
#      - bitcoin
#    expose:
#      - "50001"
#      - "50002"
#    ports:
#      - 50001:50001
#      - 50002:50002
#    restart: always
#    stop_grace_period: 10s
#
#  mempool-web:
#    environment:
#      FRONTEND_HTTP_PORT: "8080"
#      BACKEND_MAINNET_HTTP_HOST: "mempool-api"
#    image: mempool/frontend:latest
#    depends_on:
#      - mempool-api
#    container_name: mempool-web
#    user: "1000:1000"
#    restart: always
#    stop_grace_period: 5s
#    command: "./wait-for mempool-db:3306 --timeout=720 -- nginx -g 'daemon off;'"
#    ports:
#      - 1080:8080
#
#  mempool-api:
#    environment:
#      MEMPOOL_BACKEND: "electrum"
#      ELECTRUM_HOST: "fulcrum"
#      ELECTRUM_PORT: "50001"
#      ELECTRUM_TLS_ENABLED: "false"
#      CORE_RPC_HOST: "bitcoin"
#      CORE_RPC_PORT: "18443"
#      CORE_RPC_USERNAME: "user"
#      CORE_RPC_PASSWORD: "password"
#      DATABASE_ENABLED: "true"
#      DATABASE_HOST: "mempool-db"
#      DATABASE_DATABASE: "mempool"
#      DATABASE_USERNAME: "mempool"
#      DATABASE_PASSWORD: "mempool"
#      STATISTICS_ENABLED: "true"
#    image: mempool/backend:latest
#    depends_on:
#      - mempool-db
#    container_name: mempool-api
#    user: "1000:1000"
#    restart: on-failure
#    stop_grace_period: 5s
#    command: "./wait-for-it.sh mempool-db:3306 --timeout=720 --strict -- ./start.sh"
#    volumes:
#      - .datapi/:/backend/cache
#
#  mempool-db:
#    environment:
#      MYSQL_DATABASE: "mempool"
#      MYSQL_USER: "mempool"
#      MYSQL_PASSWORD: "mempool"
#      MYSQL_ROOT_PASSWORD: "admin"
#    image: mariadb:10.5.8
#    depends_on:
#      - fulcrum
#    container_name: mempool-db
#    restart: always
#    stop_grace_period: 5s

networks:
  arch:
    ipam:
      driver: default
      config:
        - subnet: 172.19.0.0/24
          gateway: 172.19.0.1